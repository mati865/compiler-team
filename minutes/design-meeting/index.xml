<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Design meeting on Rust Lang - Compiler Team</title><link>https://rust-lang.github.io/compiler-team/minutes/design-meeting/</link><description>Recent content in Design meeting on Rust Lang - Compiler Team</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://rust-lang.github.io/compiler-team/minutes/design-meeting/index.xml" rel="self" type="application/rss+xml"/><item><title>Planning the gcx, tcx transition</title><link>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-06-21-the-gcx-tcx-transition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-06-21-the-gcx-tcx-transition/</guid><description>Planning the &#39;gcx, &#39;tcx transition Zulip thread Summary Discuss the end-state for tcx Plan the steps we will take to get there and time frame Motivation Now that we have removed the per-inference context interners, we plan to transition the compiler to a different naming scheme. This is a major shift and something we should plan carefully.
Also, it&amp;rsquo;s an opportunity to consider an alternate naming scheme &amp;ndash; tcx and &#39;tcx is not known to be particularly popular.</description></item><item><title>Triage Working Group Discussion</title><link>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-07-08-triage-wg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-07-08-triage-wg/</guid><description>Triage Working Group Discussion Zulip thread Summary Discussed ideas of a triage working group and how that might interact Discussed pnkfelix/nikomatsakis taking leave over next few weeks and what to do in the meantime Discussed the problems around review queues pnkfelix/nikomatsakis absence pnkfelix will be going on parental leave for 2 months starting July 15. nikomatsakis will be on PTO for a month or so, with limited availability.</description></item><item><title>rust-analyzer and libraryification</title><link>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-09-13-rust-analyzer-and-libraryification/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/minutes/design-meeting/2019-09-13-rust-analyzer-and-libraryification/</guid><description>rust-analyzer and libraryification Zulip thread Proposal issue: rust-lang/rust#160 Additional notes: hackmd document Summary Goal of the meeting is to update on rust-analyzer plans and discuss taking the next step towards extracting &amp;ldquo;standalone libraries&amp;rdquo; that can be shared between rustc and rust-analyzer.
Update on rust-analyzer Rust-analyzer has made big strides and now includes
name resolution a partial type checker preliminary integration with chalk for trait solving as well as a shared lexer with rustc What does library-ification mean?</description></item></channel></rss>